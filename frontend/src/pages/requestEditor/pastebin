


/*      
            
            <button onClick={() => toggleUpdate(request)}>Update Request</button>

            {updateForm._id && (
        <div>
          <h2>Update request</h2>
          <form onSubmit={updateRequest}>
            <input
              onChange={handleUpdateFieldChange}
              value={updateForm.userId}
              name="userId"
            />
            <textarea
              onChange={handleUpdateFieldChange}
              value={updateForm.creationDate}
              name="creationDate"
            />
            <button type="submit">Update request</button>
          </form>
        </div>
      )}

      {!updateForm._id && (
        <div>
          <h2>Create request</h2>
          <form onSubmit={createRequest}>
            <input
              onChange={updateCreateFormField}
              value={createForm.userId}
              name="userId"
            />
            <textarea
              onChange={updateCreateFormField}
              value={createForm.body}
              name="creationDate"
            />
            
            <button type="submit">Create request</button>
          </form>
        </div>)}
            <td>key={request._id}</td>
            */

            const updateRequest = async (e) => {
                e.preventDefault();
            
                const { userId, creationDate,status,type } = updateForm;
            
                // Send the update request
                const res = await axios.put(
                  `http://localhost:5000/request/${updateForm._id}`,
                  { userId,creationDate,status,type }
                );
            
                // Update state
                const newRequest = [...requests];
                const requestIndex = requests.findIndex((request) => {
                  return request._id === updateForm._id;
                });
                newRequest[requestIndex] = res.data.request;
            
                setRequests(newRequest);
            
                // Clear update form state
                setUpdateForm({
                  _id: null,
                  userId: "",
                  creationDate: "",
                  status:"",
                  type:"",
                });
              };
              const handleUpdateFieldChange = (e) => {
                const { value, userId } = e.target;
            
                setUpdateForm({
                  ...updateForm,
                  [userId]: value,
                });
              };
            
              const toggleUpdate = (request) => {
                // Set state on update form
                setUpdateForm({ userId: request.userId, creationDate: request.creationDate, _id: request._id,
                     status: request.status, type:request.type });
              };
              const createRequest = async (e) => {
                e.preventDefault();
            
                const res = await axios.post("http://localhost:5000/request", createForm);
            
                setRequests([...requests, res.data.request]);
            
                setCreateForm({
                  userId: "",
                  creationDate: "",
                  status:"",
                  type:""
                });
              };


              const updateCreateFormField = (e) => {
                const { userId, value,creationDate, status,type } = e.target;
            
                setCreateForm({
                  ...createForm,
                  [userId]: value, // a verifier 
                });
              };
            
              